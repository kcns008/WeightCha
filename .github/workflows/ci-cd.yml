name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: weightcha_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:6
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        cd backend-api && npm ci
        cd ../web-sdk && npm ci
    
    - name: Lint code
      run: |
        cd backend-api && npm run lint
        cd ../web-sdk && npm run lint
    
    - name: Type check
      run: |
        cd web-sdk && npm run type-check
    
    - name: Run tests
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:test_password@localhost:5432/weightcha_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-jwt-secret
        API_KEY_SALT: test-api-key-salt
      run: |
        cd backend-api && npm test
        cd ../web-sdk && npm test
    
    - name: Build packages
      run: |
        cd web-sdk && npm run build
    
    - name: Test integration
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
        npm run test:integration
        docker-compose -f docker-compose.test.yml down

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security audit
      run: |
        cd backend-api && npm audit --audit-level moderate
        cd ../web-sdk && npm audit --audit-level moderate
    
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  publish-npm:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: cd web-sdk && npm ci
    
    - name: Build package
      run: cd web-sdk && npm run build
    
    - name: Publish to npm
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        cd web-sdk
        # Only publish if version changed
        if npm view weightcha version | grep -q $(node -p "require('./package.json').version"); then
          echo "Version already published, skipping..."
        else
          npm publish
        fi

  build-docker:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: ./backend-api
        push: true
        tags: |
          weightcha/api:latest
          weightcha/api:${{ github.sha }}
        platforms: linux/amd64,linux/arm64
    
    - name: Build and push demo image
      uses: docker/build-push-action@v5
      with:
        context: ./demo
        push: true
        tags: |
          weightcha/demo:latest
          weightcha/demo:${{ github.sha }}
        platforms: linux/amd64,linux/arm64

  deploy:
    needs: [publish-npm, build-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        # Add smoke test commands here
    
    - name: Deploy to production
      if: success()
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here
